service: iot-garden-data-ingestion
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

frameworkVersion: ">=1.34.0 <2.0.0"

provider:
  name: aws
  profile: iot-garden-deploy
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  deploymentBucket: ${self:custom.deployment_bucket}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

package:
  individually: true
  exclude:
    - node_modules/**

resources:  
  Description: Automatically created by Serverless Framework to manage IoT Garden Resources
  Resources:

    PostImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket_iot_garden_data_lake}

    GardenMappingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table_garden_mapping}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    GardenSensorDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table_sensor_data}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
  

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  user_name: filipebarretto
  account_id: ${file(./customjs/custom-account-id.js):getAccountId}
  deployment_bucket: ${self:custom.account_id}-${self:service}-${self:provider.stage}
  bucket_iot_garden_data_lake: ${self:custom.account_id}-iot-garden-data-lake-${self:provider.stage}-${self:custom.account_id}
  webinar_sns: webinar-sns-${self:provider.stage}-${self:custom.account_id}
  solvimm_tips_sns: solvimm-tips-sns-${self:provider.stage}-${self:custom.account_id}
  table_sensor_data: ${self:custom.account_id}-${self:service}-sensor-data-${self:provider.stage}-${self:custom.account_id}
  table_garden_mapping: ${self:custom.account_id}-${self:service}-garden-mapping-${self:provider.stage}-${self:custom.account_id}
  
  
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-plugin-create-deployment-bucket
  - serverless-pseudo-parameters